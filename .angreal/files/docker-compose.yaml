---
name: brokkr-dev

services:
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=brokkr
      - POSTGRES_PASSWORD=brokkr
      - POSTGRES_DB=brokkr
    ports:
      - 5432:5432
    volumes:
      - brokkr-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "brokkr"]
      interval: 1s
      retries: 60
    restart: always

  brokkr-broker:
    command: serve
    build:
      context: ../..
      dockerfile: docker/Dockerfile.broker
    ports:
      - 3000:3000
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - BROKKR__DATABASE__URL=postgres://brokkr:brokkr@postgres:5432/brokkr
    volumes:
      - brokkr-keys:/tmp/brokkr-keys
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/readyz"]
      interval: 5s
      timeout: 3s
      retries: 10

  init-agent:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.broker
    depends_on:
      brokkr-broker:
        condition: service_healthy
    environment:
      - BROKKR__DATABASE__URL=postgres://brokkr:brokkr@postgres:5432/brokkr
    volumes:
      - brokkr-keys:/tmp/brokkr-keys
    entrypoint: []
    command: >
      sh -c "
        ./brokkr-broker create agent --name brokkr-integration-test-agent --cluster-name brokkr-dev-integration-cluster | tee /tmp/brokkr-keys/agent.out &&
        grep 'Initial PAK:' /tmp/brokkr-keys/agent.out | cut -d' ' -f3 > /tmp/brokkr-keys/agent.pak
      "

  brokkr-agent:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.agent
    depends_on:
      init-agent:
        condition: service_completed_successfully
      init-kubeconfig:
        condition: service_completed_successfully
    environment:
      - BROKKR__AGENT__BROKER_URL=http://brokkr-broker:3000
      - BROKKR__AGENT__AGENT_NAME=brokkr-integration-test-agent
      - BROKKR__AGENT__CLUSTER_NAME=brokkr-dev-integration-cluster
      - BROKKR__AGENT__KUBECONFIG_PATH=/tmp/brokkr-keys/kubeconfig.docker.yaml
    volumes:
      - brokkr-keys:/tmp/brokkr-keys
    entrypoint: []
    command: >
      sh -c "
        echo 'Container Starting.'

        # Wait for kubeconfig to be ready and accessible
        while [ ! -f /tmp/brokkr-keys/kubeconfig.yaml ] ; do
          echo 'Waiting for kubeconfig to be ready...'
          sleep 10
        done

        # Wait for agent PAK to be ready
        while [ ! -f /tmp/brokkr-keys/agent.pak ] ; do
          echo 'Waiting for agent PAK to be ready...'
          sleep 10
        done

        # Export PAK and start agent
        export BROKKR__AGENT__PAK=$$(cat /tmp/brokkr-keys/agent.pak)

        # Wait for Kubernetes API to be fully accessible with retries
        max_retries=30
        retry_count=0
        while ! KUBECONFIG=/tmp/brokkr-keys/kubeconfig.docker.yaml kubectl get nodes > /dev/null 2>&1; do
          retry_count=$$((retry_count + 1))
          if [ $$retry_count -eq $$max_retries ]; then
            echo 'Timed out waiting for Kubernetes API to become accessible'
            exit 1
          fi
          echo 'Waiting for Kubernetes API to be accessible... (attempt '$$retry_count' of '$$max_retries')'
          sleep 5
        done

        echo 'Kubernetes API is accessible, starting agent...'
        env && cat /tmp/brokkr-keys/agent.pak && ./brokkr-agent start
      "


  k3s:
    image: rancher/k3s:v1.27.3-k3s1
    command:
      - server
      - --cluster-init
      - --write-kubeconfig=/output/kubeconfig.yaml
      - --write-kubeconfig-mode=666
    privileged: true
    environment:
      - K3S_TOKEN=brokkr-secret
      - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
    volumes:
      - k3s-data:/var/lib/rancher/k3s
      - brokkr-keys:/output

    ports:
      - "6443:6443"
    healthcheck:
      test: ["CMD", "kubectl", "get", "--raw", "/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  init-kubeconfig:
    image: alpine
    depends_on:
      k3s:
        condition: service_healthy
    volumes:
      - brokkr-keys:/tmp/brokkr-keys
    command: >
      sh -c '
        apk add --no-cache sed &&
        # Create local kubeconfig
        cp /tmp/brokkr-keys/kubeconfig.yaml /tmp/brokkr-keys/kubeconfig.local.yaml &&
        sed -i "s|server: https://127.0.0.1:6443|server: https://localhost:6443|g" /tmp/brokkr-keys/kubeconfig.local.yaml &&

        # Create docker kubeconfig
        cp /tmp/brokkr-keys/kubeconfig.yaml /tmp/brokkr-keys/kubeconfig.docker.yaml &&
        sed -i "s|server: https://127.0.0.1:6443|server: https://brokkr-dev-k3s-1:6443|g" /tmp/brokkr-keys/kubeconfig.docker.yaml

        # Sleep to ensure files written
        sleep 60
      '

  brokkr-ui:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.ui
    ports:
      - "3001:3001"
    depends_on:
      brokkr-broker:
        condition: service_healthy
    environment:
      - REACT_APP_BROKER_URL=http://localhost:3000
      - PORT=3001
      - REACT_APP_ADMIN_PAK=brokkr_BR3rVsDa_GK3QN7CDUzYc6iKgMkJ98M2WSimM5t6U8
    volumes:
      - brokkr-keys:/tmp/brokkr-keys

  copy-keys:
    image: alpine
    volumes:
      - brokkr-keys:/source:ro
      - /tmp/brokkr-keys:/destination
    command: >
      sh -c "
        mkdir -p /destination &&
        cp -r /source/* /destination/ &&
        chmod -R 777 /destination/
      "
    depends_on:
      init-agent:
        condition: service_completed_successfully
      init-kubeconfig:
        condition: service_completed_successfully

volumes:
  brokkr-postgres-data:
  k3s-data:
  brokkr-keys:
